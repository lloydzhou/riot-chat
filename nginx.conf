
    push_stream_shared_memory_size                100m;
    push_stream_max_channel_id_length             200;
    # max messages to store in memory
    push_stream_max_messages_stored_per_channel   20;
    # message ttl
    push_stream_message_ttl                       5m;
    # ping frequency
    push_stream_ping_message_interval             30s;
    # connection ttl to enable recycle
    push_stream_subscriber_connection_ttl         15m;
    # connection ttl for long polling
    push_stream_longpolling_connection_ttl        30s;
    push_stream_timeout_with_body                 off;

    # wildcard
    push_stream_wildcard_channel_prefix         "broad_";
    push_stream_wildcard_channel_max_qtd        3;

    push_stream_message_template                "{\"id\":~id~,\"channel\":\"~channel~\",\"text\":\"~text~\", \"tag\":\"~tag~\", \"time\":\"~time~\", \"eventid\":\"~event-id~\"}";

    # subscriber may create channels on demand or only authorized (publisher) may do it?
    push_stream_authorized_channels_only        off;

    push_stream_allowed_origins                 "*";

    server {
        listen           80 default_server;

        server_name     localhost;
        set $ROOT /home/lloyd/workspace/riot-chat;

        location /channels-stats {
            # activate channels statistics mode for this location
            push_stream_channels_statistics;

            # query string based channel id
            push_stream_channels_path               $arg_id;
        }

        location /pub {
            # activate publisher mode for this location, with admin support
            push_stream_publisher admin;

            # query string based channel id
            push_stream_channels_path               $arg_id;

            # store messages in memory
            push_stream_store_messages              on;

            # Message size limit
            # client_max_body_size MUST be equal to client_body_buffer_size or
            # you will be sorry.
            client_max_body_size                    32k;
            client_body_buffer_size                 32k;
        }

        location ~ /sub/(.*) {
            # activate subscriber mode for this location
            push_stream_subscriber;

            # positional channel path
            push_stream_channels_path                   $1;
            if ($arg_tests = "on") {
              push_stream_channels_path                 "test_$1";
            }

            # header to be sent when receiving new subscriber connection
            push_stream_header_template                 "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n<meta http-equiv=\"Cache-Control\" content=\"no-store\">\r\n<meta http-equiv=\"Cache-Control\" content=\"no-cache\">\r\n<meta http-equiv=\"Pragma\" content=\"no-cache\">\r\n<meta http-equiv=\"Expires\" content=\"Thu, 1 Jan 1970 00:00:00 GMT\">\r\n<script type=\"text/javascript\">\r\nwindow.onError = null;\r\ntry{ document.domain = (window.location.hostname.match(/^(\d{1,3}\.){3}\d{1,3}$/)) ? window.location.hostname : window.location.hostname.split('.').slice(-1 * Math.max(window.location.hostname.split('.').length - 1, (window.location.hostname.match(/(\w{4,}\.\w{2}|\.\w{3,})$/) ? 2 : 3))).join('.');}catch(e){}\r\nparent.PushStream.register(this);\r\n</script>\r\n</head>\r\n<body>";

            # message template
            push_stream_message_template                "<script>p(~id~,'~channel~','~text~','~event-id~', '~time~', '~tag~');</script>";
            # footer to be sent when finishing subscriber connection
            push_stream_footer_template                 "</body></html>";
            # content-type
            default_type                                "text/html; charset=utf-8";

            if ($arg_qs = "on") {
              push_stream_last_received_message_time "$arg_time";
              push_stream_last_received_message_tag  "$arg_tag";
              push_stream_last_event_id              "$arg_eventid";
            }
        }

        location ~ /ev/(.*) {
            # activate event source mode for this location
            push_stream_subscriber eventsource;

            # positional channel path
            push_stream_channels_path                   $1;
            if ($arg_tests = "on") {
              push_stream_channels_path                 "test_$1";
            }

            if ($arg_qs = "on") {
              push_stream_last_received_message_time "$arg_time";
              push_stream_last_received_message_tag  "$arg_tag";
              push_stream_last_event_id              "$arg_eventid";
            }
        }

        location ~ /lp/(.*) {
            # activate long-polling mode for this location
            push_stream_subscriber      long-polling;

            # positional channel path
            push_stream_channels_path         $1;
            if ($arg_tests = "on") {
              push_stream_channels_path                 "test_$1";
            }

            if ($arg_qs = "on") {
              push_stream_last_received_message_time "$arg_time";
              push_stream_last_received_message_tag  "$arg_tag";
              push_stream_last_event_id              "$arg_eventid";
            }
        }

        location ~ /jsonp/(.*) {
            # activate long-polling mode for this location
            push_stream_subscriber      long-polling;

            push_stream_last_received_message_time "$arg_time";
            push_stream_last_received_message_tag  "$arg_tag";
            push_stream_last_event_id              "$arg_eventid";

            # positional channel path
            push_stream_channels_path         $1;
            if ($arg_tests = "on") {
              push_stream_channels_path                 "test_$1";
            }
        }

        location ~ /ws/(.*) {
            # activate websocket mode for this location
            push_stream_subscriber websocket;

            # positional channel path
            push_stream_channels_path                   $1;
            if ($arg_tests = "on") {
              push_stream_channels_path                 "test_$1";
            }

            # store messages in memory
            push_stream_store_messages              on;

            push_stream_websocket_allow_publish     on;

            if ($arg_qs = "on") {
              push_stream_last_received_message_time "$arg_time";
              push_stream_last_received_message_tag  "$arg_tag";
              push_stream_last_event_id              "$arg_eventid";
            }
        }

        location / {
            root $ROOT;
            try_files $uri $uri/ /chat.html;
        }

        client_max_body_size 100m;

        # Upload form should be submitted to this location
        location /upload {
            # Pass altered request body to this location
            upload_pass   /backend;
            # upload_pass   /pub;

            # Store files to this directory
            # The directory is hashed, subdirectories 0 1 2 3 4 5 6 7 8 9 should exist
            upload_store /home/lloyd/workspace/riot-chat 1;

            # Allow uploaded files to be read only by user
            # upload_store_access user:r;

            # Set specified fields in request body
            upload_set_form_field "${upload_field_name}_name" $upload_file_name;
            upload_set_form_field "${upload_field_name}_content_type" $upload_content_type;
            upload_set_form_field "${upload_field_name}_path" $upload_tmp_path;

            # Inform backend about hash and size of a file
            upload_aggregate_form_field "${upload_field_name}_md5" $upload_file_md5;
            upload_aggregate_form_field "${upload_field_name}_size" $upload_file_size;

            # echo "nick: $arg_nick, $upload_field_name, $upload_tmp_path";
            # echo "{\"nick\": \"$arg_nick\", \"text\": \"$upload_field_name\", \"path\": \"$upload_tmp_path\"}";
            # echo_subrequest POST /pub -b '{"nick": "$arg_nick", "text": "$upload_field_name", "path": "$upload_tmp_path"}';

            # upload_pass_form_field "^id$|^text$";
        }
       
        location /backend {
             echo_request_body;
        }
    }
